require "spec_helper"
require "financify/ledger"
require "financify/transaction"

RSpec.describe Financify::Ledger do
  let(:ledger) { Financify::Ledger.new }

  it "inicia sem transa√ß√µes" do
    novo_ledger = Financify::Ledger.new # üî• Ledger limpo para esse teste
    expect(novo_ledger.transacoes).to be_empty
  end

  it "adiciona uma transa√ß√£o corretamente" do
    transacao = Financify::Transaction.new(200, :receita, "Sal√°rio", "2025-03-07")
    ledger.adicionar_transacao(transacao)

    expect(ledger.transacoes).to include(transacao)
  end

  it "calcula o saldo corretamente" do
    ledger = Financify::Ledger.new # üî• Ledger novo para evitar interfer√™ncias

    ledger.adicionar_transacao(Financify::Transaction.new(500, :receita, "Sal√°rio", "2025-03-07"))
    ledger.adicionar_transacao(Financify::Transaction.new(100, :despesa, "Alimenta√ß√£o", "2025-03-07"))

    expect(ledger.saldo_total).to eq(400) # 500 - 100
  end

  it "n√£o permite adicionar objetos que n√£o sejam Transaction" do
    expect { ledger.adicionar_transacao("isso n√£o √© uma transa√ß√£o") }.to raise_error(ArgumentError, "Deve ser uma inst√¢ncia de Transaction")
  end

  before do
    ledger.adicionar_transacao(Financify::Transaction.new(100, :receita, "Freelance", "2025-03-01"))
    ledger.adicionar_transacao(Financify::Transaction.new(200, :receita, "Sal√°rio", "2025-03-05"))
    ledger.adicionar_transacao(Financify::Transaction.new(50, :despesa, "Alimenta√ß√£o", "2025-03-07"))
  end

  it "lista todas as transa√ß√µes corretamente" do
    expect(ledger.listar_transacoes).to include("2025-03-01 | RECEITA | Freelance | 100 |")
    expect(ledger.listar_transacoes).to include("2025-03-05 | RECEITA | Sal√°rio | 200 |")
    expect(ledger.listar_transacoes).to include("2025-03-07 | DESPESA | Alimenta√ß√£o | -50 |")
  end

  it "filtra transa√ß√µes por categoria corretamente" do
    resultado = ledger.transacoes_por_categoria("Sal√°rio")
    expect(resultado.size).to eq(1)
    expect(resultado.first.categoria).to eq("Sal√°rio")
  end

  it "filtra transa√ß√µes por per√≠odo corretamente" do
    resultado = ledger.transacoes_por_periodo("2025-03-01", "2025-03-06")
    expect(resultado.size).to eq(2) # S√≥ as duas primeiras entram nesse per√≠odo
  end
end
